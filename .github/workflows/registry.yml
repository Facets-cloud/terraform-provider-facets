name: Generate Registry Metadata

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  generate-registry:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Generate registry structure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get all releases
          RELEASES=$(gh release list --limit 100 --json tagName,isPrerelease | jq -r '.[] | select(.isPrerelease == false) | .tagName')

          # Create docs directory with registry structure
          # Path: hostname/namespace/type/
          mkdir -p docs/facets.cloud/facets-cloud/facets

          # Generate versions list
          echo "{" > docs/facets.cloud/facets-cloud/facets/index.json
          echo "  \"versions\": [" >> docs/facets.cloud/facets-cloud/facets/index.json
          FIRST=true
          for TAG in $RELEASES; do
            VERSION=${TAG#v}
            if [ "$FIRST" = true ]; then
              echo "    \"$VERSION\"" >> docs/facets.cloud/facets-cloud/facets/index.json
              FIRST=false
            else
              echo "    ,\"$VERSION\"" >> docs/facets.cloud/facets-cloud/facets/index.json
            fi
          done
          echo "  ]" >> docs/facets.cloud/facets-cloud/facets/index.json
          echo "}" >> docs/facets.cloud/facets-cloud/facets/index.json

          # For each version, generate version metadata
          for TAG in $RELEASES; do
            VERSION=${TAG#v}
            echo "Generating metadata for version $VERSION..."

            # Get release assets
            ASSETS=$(gh release view $TAG --json assets -q '.assets')

            # Create version directory
            mkdir -p docs/facets.cloud/facets-cloud/facets/$VERSION

            # Generate download metadata
            cat > docs/facets.cloud/facets-cloud/facets/$VERSION/download.json << EOF
          {
            "protocols": ["5.0"],
            "os": {
          EOF

            # Parse assets and generate download URLs
            echo "$ASSETS" | jq -r '.[] | select(.name | endswith(".zip")) | .name' | while read ASSET; do
              # Extract OS and ARCH from filename
              # Format: terraform-provider-facets_VERSION_OS_ARCH.zip
              FILENAME=$(basename "$ASSET" .zip)
              OS_ARCH=${FILENAME##*_}
              OS=$(echo $OS_ARCH | cut -d'_' -f1)
              ARCH=$(echo $OS_ARCH | cut -d'_' -f2)

              DOWNLOAD_URL="https://github.com/Facets-cloud/terraform-provider-facets/releases/download/$TAG/$ASSET"

              # Get SHA256
              SHASUMS_URL="https://github.com/Facets-cloud/terraform-provider-facets/releases/download/$TAG/terraform-provider-facets_${VERSION}_SHA256SUMS"
              SHA256=$(curl -sL "$SHASUMS_URL" | grep "$ASSET" | cut -d' ' -f1 || echo "")

              # Add to JSON (simplified structure)
              cat >> docs/facets.cloud/facets-cloud/facets/$VERSION/download.json << INNER_EOF
                "$OS": {
                  "$ARCH": {
                    "url": "$DOWNLOAD_URL",
                    "sha256": "$SHA256"
                  }
                },
          INNER_EOF
            done

            # Close JSON (remove last comma and close braces)
            sed -i '$ s/,$//' docs/facets.cloud/facets-cloud/facets/$VERSION/download.json
            cat >> docs/facets.cloud/facets-cloud/facets/$VERSION/download.json << EOF
              },
            "shasums_url": "https://github.com/Facets-cloud/terraform-provider-facets/releases/download/$TAG/terraform-provider-facets_${VERSION}_SHA256SUMS",
            "shasums_signature_url": "https://github.com/Facets-cloud/terraform-provider-facets/releases/download/$TAG/terraform-provider-facets_${VERSION}_SHA256SUMS.sig"
          }
          EOF
          done

          # Create index.html for GitHub Pages
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Facets Terraform Provider Registry</title>
          </head>
          <body>
            <h1>Facets Terraform Provider Registry</h1>
            <p>This is a custom Terraform provider registry for the Facets provider.</p>
            <h2>Usage</h2>
            <pre>
          terraform {
            required_providers {
              facets = {
                source  = "facets.cloud/facets-cloud/facets"
                version = "~> 0.1.0"
              }
            }
          }
          </pre>
            <p>Configure your <code>~/.terraformrc</code>:</p>
            <pre>
          provider_installation {
            network_mirror {
              url = "https://facets-cloud.github.io/terraform-provider-facets/"
              include = ["facets.cloud/*/*"]
            }
            direct {
              exclude = ["facets.cloud/*/*"]
            }
          }
          </pre>
          </body>
          </html>
          EOF

      - name: Commit registry files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/
          git diff --staged --quiet || git commit -m "Update provider registry metadata"
          git push origin main

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
